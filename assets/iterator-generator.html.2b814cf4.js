import{_ as o}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as e,c,a as n,d as t,e as p,b as s,r as u}from"./app.506102ba.js";const l={},k=p(`<h2 id="\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#\u8FED\u4EE3\u5668" aria-hidden="true">#</a> \u8FED\u4EE3\u5668</h2><p>\u8FED\u4EE3\u5668\u662F\u4E00\u4E2A\u7B26\u5408\u8FED\u4EE3\u5668\u534F\u8BAE\u7684\u5BF9\u8C61\u3002<strong>\u8FED\u4EE3\u5668\u534F\u8BAE</strong>\u89C4\u5B9A\u4E86\u4EA7\u751F\u4E00\u7CFB\u5217\u503C\u7684\u6807\u51C6\u65B9\u5F0F\u3002\u5F53\u503C\u4E3A\u6709\u9650\u4E2A\u65F6\uFF0C\u6240\u6709\u7684\u503C\u90FD\u88AB\u8FED\u4EE3\u5B8C\u6BD5\u540E\uFF0C\u5219\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u9ED8\u8BA4\u8FD4\u56DE\u503C\u3002</p><p>\u8FED\u4EE3\u5668\u534F\u8BAE\u8981\u6C42\u5B9E\u73B0 <code>next</code> \u65B9\u6CD5\uFF0C<code>next</code> \u662F\u4E00\u4E2A\u65E0\u53C2\u6570\u6216\u63A5\u53D7\u4E00\u4E2A\u53C2\u6570\u7684\u51FD\u6570\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u6709 <code>done</code> \u548C <code>value</code> \u5C5E\u6027\u7684\u5BF9\u8C61\uFF1A</p><ul><li>done\uFF1A\u5982\u679C\u8FED\u4EE3\u5668\u53EF\u4EE5\u4EA7\u751F\u5E8F\u5217\u4E2D\u7684\u4E0B\u4E00\u4E2A\u503C\uFF0C\u5219\u4E3A <code>false</code>\u3002\u5982\u679C\u8FED\u4EE3\u5668\u5DF2\u5C06\u5E8F\u5217\u8FED\u4EE3\u5B8C\u6BD5\uFF0C\u5219\u4E3A <code>true</code>\u3002</li><li>value\uFF1A\u8FED\u4EE3\u5668\u8FD4\u56DE\u7684\u5C5E\u6027\u503C\uFF0C<code>done</code> \u4E3A <code>true</code> \u65F6\u53EF\u7701\u7565\u3002</li></ul><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment">// \u521B\u5EFA\u6570\u7EC4\u8FED\u4EE3\u5668\u7684\u51FD\u6570</span>
<span class="token keyword">function</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arrayIterator <span class="token operator">=</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>
</code></pre></div><h3 id="\u53EF\u8FED\u4EE3\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#\u53EF\u8FED\u4EE3\u5BF9\u8C61" aria-hidden="true">#</a> \u53EF\u8FED\u4EE3\u5BF9\u8C61</h3><p>\u53EF\u8FED\u4EE3\u5BF9\u8C61\u65F6\u4E00\u4E2A\u7B26\u5408<strong>\u53EF\u8FED\u4EE3\u534F\u8BAE</strong>\u7684\u5BF9\u8C61\uFF0C\u53EF\u8FED\u4EE3\u534F\u8BAE\u5141\u8BB8\u5BF9\u8C61\u81EA\u5B9A\u4E49\u5B83\u4EEC\u7684\u8FED\u4EE3\u884C\u4E3A\u3002</p>`,7),i=s("\u8981\u6210\u4E3A\u53EF\u8FED\u4EE3\u5BF9\u8C61\uFF0C \u4E00\u4E2A\u5BF9\u8C61\u5FC5\u987B\u5B9E\u73B0 "),r=n("code",null,"@@iterator",-1),d=s(" \u65B9\u6CD5\u3002\u8FD9\u610F\u5473\u7740\u5BF9\u8C61\uFF08\u6216\u8005\u5B83"),m={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"},f=s("\u539F\u578B\u94FE"),y=s("\u4E0A\u7684\u67D0\u4E2A\u5BF9\u8C61\uFF09\u5FC5\u987B\u6709\u4E00\u4E2A\u952E\u4E3A "),g=n("code",null,"@@iterator",-1),w=s(" \u7684\u5C5E\u6027\uFF0C\u53EF\u901A\u8FC7\u5E38\u91CF "),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"Symbol.iterator",-1),x=s(" \u8BBF\u95EE\u8BE5\u5C5E\u6027\u3002"),b=p(`<p>\u53EF\u8FED\u4EE3\u534F\u8BAE\u8981\u6C42 <code>[Symbol.iterator]</code> \u662F\u4E00\u4E2A\u65E0\u53C2\u6570\u51FD\u6570\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u7B26\u5408\u8FED\u4EE3\u5668\u534F\u8BAE\u7684\u5BF9\u8C61\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u81EA\u5B9A\u4E49\u6570\u7EC4\u8FED\u4EE3\u5668</span>
<span class="token keyword">const</span> iterableObj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">array</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token comment">// \u53EF\u8BA1\u7B97\u5C5E\u6027</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u4F7F\u7528\u7BAD\u5934\u51FD\u6570\uFF0Cthis \u6307\u5411 iterableObj\uFF0C\u5426\u5219 this \u6307\u5411 return \u7684\u8FD9\u4E2A\u5BF9\u8C61</span>
      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>array<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>array<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arrayIterator <span class="token operator">=</span> iterableObj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>

<span class="token comment">// \u6570\u7EC4\u539F\u751F\u8FED\u4EE3\u5668</span>
<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">const</span> NativeArrayIterator <span class="token operator">=</span> array<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NativeArrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NativeArrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NativeArrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>NativeArrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> iterableObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment">// 1, 2, 3</span>
<span class="token punctuation">}</span>
</code></pre></div><p>Array\u3001String\u3001Set\u3001Map\u3001argumetns\u3001NodeList \u5747\u662F\u53EF\u8FED\u4EE3\u5BF9\u8C61</p><p>\u5E94\u7528\uFF1A</p><ul><li>for ...of\u3001\u5C55\u5F00\u8FD0\u7B97\u7B26\u3001yield*\u3001\u89E3\u6784\u8D4B\u503C</li><li>new Map([Iterable])\u3001new WeakMap([iterable])\u3001new Set([iterable])\u3001new WeakSet([iterable])</li><li>Promise.all(iterable)\u3001Promise.race(iterable)\u3001Array.from(iterable)</li></ul><h3 id="for-in-\u4E0E-for-of" tabindex="-1"><a class="header-anchor" href="#for-in-\u4E0E-for-of" aria-hidden="true">#</a> for in \u4E0E for of</h3><p>for in \u904D\u5386\u7684\u662F\u666E\u901A\u5BF9\u8C61\u7684\u53EF\u679A\u4E3E\u5C5E\u6027\uFF08\u952E\u540D\uFF09\uFF0Cfor of \u904D\u5386\u7684\u662F\u53EF\u8FED\u4EE3\u5BF9\u8C61\u7684\u53EF\u8FED\u4EE3\u5143\u7D20\uFF08\u503C\uFF09\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">objCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">arrCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span>

<span class="token comment">// for in \u904D\u5386\u952E\u540D</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// \u6253\u5370\uFF1A0 1 foo arrCustom objCustom</span>
<span class="token punctuation">}</span>

<span class="token comment">// for of \u904D\u5386\u952E\u503C\uFF0C\u4E0D\u904D\u5386 objCustom\u3001arrCustom \u548C\u5B9E\u4F8B\u5C5E\u6027 foo</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// \u6253\u5370\uFF1Aa b</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u81EA\u5B9A\u4E49\u7C7B\u7684\u8FED\u4EE3" tabindex="-1"><a class="header-anchor" href="#\u81EA\u5B9A\u4E49\u7C7B\u7684\u8FED\u4EE3" aria-hidden="true">#</a> \u81EA\u5B9A\u4E49\u7C7B\u7684\u8FED\u4EE3</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u5B9A\u4E49\u4E00\u4E2A\u73ED\u7EA7\u7C7B, \u521B\u5EFA\u51FA\u6765\u7684\u5BF9\u8C61\u662F\u53EF\u8FED\u4EE3\u5BF9\u8C61</span>
<span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">classNum<span class="token punctuation">,</span> students</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>classNum <span class="token operator">=</span> classNum
    <span class="token keyword">this</span><span class="token punctuation">.</span>students <span class="token operator">=</span> students
  <span class="token punctuation">}</span>

  <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token parameter">newStudent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newStudent<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token comment">// \u8FED\u4EE3\u5668\u7684\u4E2D\u65AD</span>
      <span class="token function-variable function">return</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u8FED\u4EE3\u5668\u63D0\u524D\u7EC8\u6B62&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token literal-property property">done</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> class1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">(</span><span class="token string">&#39;1\u73ED&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;\u5C0F\u660E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5C0F\u7EA2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5C0F\u738B&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
class1<span class="token punctuation">.</span><span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token string">&#39;\u5C0F\u521A&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stu <span class="token keyword">of</span> class1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stu <span class="token operator">===</span> <span class="token string">&#39;\u5C0F\u738B&#39;</span><span class="token punctuation">)</span> <span class="token keyword">break</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u751F\u6210\u5668" tabindex="-1"><a class="header-anchor" href="#\u751F\u6210\u5668" aria-hidden="true">#</a> \u751F\u6210\u5668</h2><p>\u751F\u6210\u5668\u662F\u7279\u6B8A\u7684\u8FED\u4EE3\u5668\uFF0C\u53EF\u4EE5\u63A7\u5236\u51FD\u6570\u7684\u6267\u884C\u4E0E\u6682\u505C\u3002</p><p>\u4E00\u822C\u5730\uFF0C\u51FD\u6570\u7EC8\u6B62\u6761\u4EF6\u662F\u8FD4\u56DE\u503C\u6216\u53D1\u751F\u5F02\u5E38\u3002\u4F7F\u7528\u751F\u6210\u5668\u63A7\u5236\u51FD\u6570\u7684\u6267\u884C\u4E0E\u6682\u505C\u3002</p><p>\u901A\u8FC7 <code>function*</code> \u5B9A\u4E49\u751F\u6210\u5668\u51FD\u6570\uFF0C\u6267\u884C\u751F\u6210\u5668\u51FD\u6570\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u751F\u6210\u5668\u5BF9\u8C61\uFF0C\u6267\u884C\u751F\u6210\u5668\u5BF9\u8C61\u7684 <code>next</code> \u65B9\u6CD5\uFF0C\u4F1A\u4F9D\u6B21\u6267\u884C\u751F\u6210\u5668\u51FD\u6570\u91CC\u88AB <code>yield</code> \u5206\u5272\u7684\u6BB5\u4EE3\u7801\uFF0C\u5E76\u8FD4\u56DE <code>{value: undefined, done: false}</code>\uFF0C\u7ED3\u675F\u5219 <code>done: true</code> \uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u7B2C\u4E00\u6BB5\u4EE3\u7801</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u51FD\u6570\u5F00\u59CB\u6267\u884C&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token number">1</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u7B2C\u4E00\u6BB5\u4EE3\u7801\uFF1A&#39;</span><span class="token punctuation">,</span> value1<span class="token punctuation">)</span>
  <span class="token keyword">yield</span>
  <span class="token comment">// \u7B2C\u4E8C\u6BB5\u4EE3\u7801</span>
  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token number">2</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u7B2C\u4E8C\u6BB5\u4EE3\u7801\uFF1A&#39;</span><span class="token punctuation">,</span> value2<span class="token punctuation">)</span>
  <span class="token keyword">yield</span>
  <span class="token comment">// \u7B2C\u4E09\u6BB5\u4EE3\u7801</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u51FD\u6570\u6267\u884C\u7ED3\u675F&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6267\u884C\u751F\u6210\u5668\u51FD\u6570\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u751F\u6210\u5668\u5BF9\u8C61</span>
<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// \u6267\u884C\u7B2C\u4E00\u6BB5\u4EE3\u7801</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u51FD\u6570\u5F00\u59CB\u6267\u884C \u7B2C\u4E00\u6BB5\u4EE3\u7801\uFF1A 1</span>
<span class="token comment">// \u6267\u884C\u7B2C\u4E8C\u6BB5\u4EE3\u7801</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u7B2C\u4E8C\u6BB5\u4EE3\u7801\uFF1A 2</span>
<span class="token comment">// \u6267\u884C\u7B2C\u4E09\u6BB5\u4EE3\u7801</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u51FD\u6570\u6267\u884C\u7ED3\u675F</span>
</code></pre></div><h3 id="next-\u65B9\u6CD5\u4F20\u9012\u53C2\u6570" tabindex="-1"><a class="header-anchor" href="#next-\u65B9\u6CD5\u4F20\u9012\u53C2\u6570" aria-hidden="true">#</a> next \u65B9\u6CD5\u4F20\u9012\u53C2\u6570</h3><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u51FD\u6570\u5F00\u59CB\u6267\u884C&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token keyword">yield</span> initial <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token keyword">yield</span> value1 <span class="token operator">+</span> <span class="token number">2</span>
  <span class="token keyword">const</span> value3 <span class="token operator">=</span> <span class="token keyword">yield</span> value2 <span class="token operator">+</span> <span class="token number">3</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u51FD\u6570\u6267\u884C\u7ED3\u675F&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u751F\u6210\u5668\u4E0A\u7684next\u65B9\u6CD5\u53EF\u4EE5\u4F20\u9012\u53C2\u6570</span>
<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> result1 <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;result1: &#39;</span><span class="token punctuation">,</span> result1<span class="token punctuation">)</span> <span class="token comment">// result1:  {value: 1, done: false}</span>

<span class="token comment">// \u4E0A\u4E00\u6BB5\u4EE3\u7801\u7684\u8FD4\u56DE\u503C\u7684 value \u4F5C\u4E3A\u8FD9\u4E00\u6BB5\u4EE3\u7801\u7684 next \u51FD\u6570\u7684\u53C2\u6570</span>
<span class="token keyword">const</span> result2 <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>result1<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;result2: &#39;</span><span class="token punctuation">,</span> result2<span class="token punctuation">)</span> <span class="token comment">// result2:  {value: 3, done: false}</span>

<span class="token keyword">const</span> result3 <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>result2<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;result3: &#39;</span><span class="token punctuation">,</span> result3<span class="token punctuation">)</span> <span class="token comment">// result3:  {value: 6, done: true}</span>

generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="return-\u65B9\u6CD5\u63D0\u524D\u7EC8\u6B62\u51FD\u6570" tabindex="-1"><a class="header-anchor" href="#return-\u65B9\u6CD5\u63D0\u524D\u7EC8\u6B62\u51FD\u6570" aria-hidden="true">#</a> return \u65B9\u6CD5\u63D0\u524D\u7EC8\u6B62\u51FD\u6570</h3><p>yield\uFF1A\u6682\u505C\u51FD\u6570\u7684\u6267\u884C</p><p>return\uFF1A\u7EC8\u6B62\u51FD\u6570\u7684\u6267\u884C</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">initial</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u51FD\u6570\u5F00\u59CB\u6267\u884C&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> value1 <span class="token operator">=</span> <span class="token keyword">yield</span> initial <span class="token operator">+</span> <span class="token number">1</span>
  <span class="token keyword">const</span> value2 <span class="token operator">=</span> <span class="token keyword">yield</span> value1 <span class="token operator">+</span> <span class="token number">2</span>
  <span class="token keyword">const</span> value3 <span class="token operator">=</span> <span class="token keyword">yield</span> value2 <span class="token operator">+</span> <span class="token number">3</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u51FD\u6570\u6267\u884C\u7ED3\u675F&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {value: 1, done: false}</span>
<span class="token comment">// \u4F7F\u7528 return \u65B9\u6CD5\uFF0C\u5219\u7EC8\u6B62\u751F\u6210\u5668\u51FD\u6570\u7684\u6267\u884C</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">return</span><span class="token punctuation">(</span><span class="token string">&#39;\u7EC8\u6B62&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {value: &#39;\u7EC8\u6B62&#39;, done: true}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {value: undefined, done: true}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// {value: undefined, done: true}</span>
</code></pre></div><h3 id="throw-\u65B9\u6CD5\u629B\u51FA\u5F02\u5E38" tabindex="-1"><a class="header-anchor" href="#throw-\u65B9\u6CD5\u629B\u51FA\u5F02\u5E38" aria-hidden="true">#</a> throw \u65B9\u6CD5\u629B\u51FA\u5F02\u5E38</h3><p><code>throw</code>\u65B9\u6CD5\u88AB\u6355\u83B7\u4EE5\u540E\uFF0C\u4F1A\u9644\u5E26\u6267\u884C\u4E00\u6B21<code>next</code>\u65B9\u6CD5\u3002</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u7B2C\u4E00\u6BB5&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u6355\u83B7\u9519\u8BEF\uFF1A&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">yield</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u7B2C\u4E8C\u6BB5&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">yield</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;\u7B2C\u4E09\u6BB5&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u7B2C\u4E00\u6BB5</span>
generator<span class="token punctuation">.</span><span class="token function">throw</span><span class="token punctuation">(</span><span class="token string">&#39;\u9519\u8BEF&#39;</span><span class="token punctuation">)</span> <span class="token comment">// \u6355\u83B7\u9519\u8BEF\uFF1A\u9519\u8BEF  \u7B2C\u4E8C\u6BB5</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// \u7B2C\u4E09\u6BB5</span>
</code></pre></div><h2 id="\u751F\u6210\u5668\u66FF\u4EE3\u8FED\u4EE3\u5668" tabindex="-1"><a class="header-anchor" href="#\u751F\u6210\u5668\u66FF\u4EE3\u8FED\u4EE3\u5668" aria-hidden="true">#</a> \u751F\u6210\u5668\u66FF\u4EE3\u8FED\u4EE3\u5668</h2><p>\u5728\u8FED\u4EE3\u5668\u90A3\u8282\uFF0C\u901A\u8FC7 return \u4E00\u4E2A\u5E26\u6709 next \u65B9\u6CD5\u7684\u5BF9\u8C61\u521B\u5EFA\u8FED\u4EE3\u5668</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>

<span class="token comment">// \u521B\u5EFA\u6570\u7EC4\u8FED\u4EE3\u5668\u7684\u51FD\u6570</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span><span class="token parameter">array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1.\u7B2C\u4E00\u79CD\u5199\u6CD5\uFF0Cfunction \u4E0D\u52A0 *</span>
  <span class="token comment">// let index = 0</span>
  <span class="token comment">// return {</span>
  <span class="token comment">//   next: function () {</span>
  <span class="token comment">//     if (index &lt; arr.length) {</span>
  <span class="token comment">//       return { value: arr[index++], done: false }</span>
  <span class="token comment">//     } else {</span>
  <span class="token comment">//       return { value: undefined, done: true }</span>
  <span class="token comment">//     }</span>
  <span class="token comment">//   },</span>
  <span class="token comment">// }</span>

  <span class="token comment">// 2.\u7B2C\u4E8C\u79CD\u5199\u6CD5</span>
  <span class="token comment">// for (const item of arr) {</span>
  <span class="token comment">//   yield item</span>
  <span class="token comment">// }</span>

  <span class="token comment">// 3.\u6700\u7B80\u6D01\u5199\u6CD5\uFF0Cfunction \u9700\u8981\u52A0 *</span>
  <span class="token keyword">yield</span><span class="token operator">*</span> array
<span class="token punctuation">}</span>

<span class="token keyword">const</span> arrayIterator <span class="token operator">=</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arrayIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: undefined, done: true }</span>
</code></pre></div><p>\u8FED\u4EE3\u6307\u5B9A\u8303\u56F4\u7684\u51FD\u6570\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u521B\u5EFA\u4E00\u4E2A\u8FED\u4EE3\u6307\u5B9A\u8303\u56F4\u7684\u51FD\u6570</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">createRangeIterator</span><span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> end</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> index <span class="token operator">=</span> start
  <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span> index<span class="token operator">++</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> rangeIterator <span class="token operator">=</span> <span class="token function">createRangeIterator</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rangeIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 1, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rangeIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 2, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rangeIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 3, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rangeIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 4, done: false }</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rangeIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// { value: 5, done: false }</span>
</code></pre></div><p>\u81EA\u5B9A\u4E49\u7C7B\u7684\u8FED\u4EE3\u2014\u2014\u751F\u6210\u5668\u5B9E\u73B0\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// \u5B9A\u4E49\u4E00\u4E2A\u73ED\u7EA7\u7C7B, \u521B\u5EFA\u51FA\u6765\u7684\u5BF9\u8C61\u662F\u53EF\u8FED\u4EE3\u5BF9\u8C61</span>
<span class="token keyword">class</span> <span class="token class-name">Class</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">classNum<span class="token punctuation">,</span> students</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>classNum <span class="token operator">=</span> classNum
    <span class="token keyword">this</span><span class="token punctuation">.</span>students <span class="token operator">=</span> students
  <span class="token punctuation">}</span>

  <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token parameter">newStudent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newStudent<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// [Symbol.iterator]() {</span>
  <span class="token comment">//   let index = 0</span>
  <span class="token comment">//   return {</span>
  <span class="token comment">//     next: () =&gt; {</span>
  <span class="token comment">//       if (index &lt; this.students.length) {</span>
  <span class="token comment">//         return { value: this.students[index++], done: false }</span>
  <span class="token comment">//       } else {</span>
  <span class="token comment">//         return { value: undefined, done: true }</span>
  <span class="token comment">//       }</span>
  <span class="token comment">//     },</span>
  <span class="token comment">//     return: () =&gt; {</span>
  <span class="token comment">//       console.log(&#39;\u8FED\u4EE3\u5668\u63D0\u524D\u7EC8\u6B62&#39;)</span>
  <span class="token comment">//       return { value: undefined, done: true }</span>
  <span class="token comment">//     },</span>
  <span class="token comment">//   }</span>
  <span class="token comment">// }</span>
  
  <span class="token operator">*</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">yield</span><span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>students
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> class1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">(</span><span class="token string">&#39;1\u73ED&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;\u5C0F\u660E&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5C0F\u7EA2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;\u5C0F\u738B&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
class1<span class="token punctuation">.</span><span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token string">&#39;\u5C0F\u521A&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> stu <span class="token keyword">of</span> class1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="async\u3001await-\u7684\u7531\u6765" tabindex="-1"><a class="header-anchor" href="#async\u3001await-\u7684\u7531\u6765" aria-hidden="true">#</a> async\u3001await \u7684\u7531\u6765</h2><p>async\u3001await \u662F Promise \u548C\u751F\u6210\u5668\u7684\u8BED\u6CD5\u7CD6</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u4E0A\u4E00\u4E2A\u8BF7\u6C42\u63A5\u53E3\u8FD4\u56DE\u7684\u6570\u636E\u4F5C\u4E3A\u4E0B\u4E00\u4E2A\u8BF7\u6C42\u7684\u53C2\u6570</span>
<span class="token comment">// 1. \u591A\u6B21\u56DE\u8C03\uFF0C\u4F9D\u7136\u4F1A\u51FA\u73B0\u56DE\u8C03\u5730\u72F1\u7684\u95EE\u9898</span>
<span class="token function">requestData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res1:&#39;</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span> <span class="token comment">// 1\u79D2\u540E\u8F93\u51FA res1: 2</span>

  <span class="token function">requestData</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res2:&#39;</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span> <span class="token comment">// 2\u79D2\u540E\u8F93\u51FA res2: 4</span>

    <span class="token function">requestData</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res3:&#39;</span><span class="token punctuation">,</span> res3<span class="token punctuation">)</span> <span class="token comment">// 3\u79D2\u540E\u8F93\u51FA res3: 8</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 2. Promise \u4E2D then \u8FD4\u56DE\u4EE5\u4E0A\u4E00\u6B21\u8BF7\u6C42\u7ED3\u679C\u4E3A\u53C2\u6570\u7684\u65B0\u8BF7\u6C42</span>
<span class="token function">requestData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res1:&#39;</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span> <span class="token comment">// 1\u79D2\u540E\u8F93\u51FA res1: 2</span>
    <span class="token keyword">return</span> <span class="token function">requestData</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res2:&#39;</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span> <span class="token comment">// 2\u79D2\u540E\u8F93\u51FA res2: 4</span>
    <span class="token keyword">return</span> <span class="token function">requestData</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res3:&#39;</span><span class="token punctuation">,</span> res3<span class="token punctuation">)</span> <span class="token comment">// 3\u79D2\u540E\u8F93\u51FA res3: 8</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 3. Promise + \u751F\u6210\u5668</span>
<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">getDataByGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res1:&#39;</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span> <span class="token comment">// 1\u79D2\u540E\u8F93\u51FA res1: 2</span>
  <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">requestData</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res2:&#39;</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span> <span class="token comment">// 2\u79D2\u540E\u8F93\u51FA res2: 4</span>
  <span class="token keyword">const</span> res3 <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">requestData</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res3:&#39;</span><span class="token punctuation">,</span> res3<span class="token punctuation">)</span> <span class="token comment">// 3\u79D2\u540E\u8F93\u51FA res3: 8</span>
<span class="token punctuation">}</span>
<span class="token comment">// 3.1 \u624B\u52A8\u6267\u884C\u751F\u6210\u5668</span>
<span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">getDataByGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res1</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res3</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res3<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// 3.2 \u5C01\u88C5\u4E00\u4E2A\u81EA\u52A8\u6267\u884C\u7684\u751F\u6210\u5668</span>
<span class="token keyword">function</span> <span class="token function">execGenerator</span><span class="token punctuation">(</span><span class="token parameter">genFn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> generator <span class="token operator">=</span> <span class="token function">genFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">function</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> result <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result<span class="token punctuation">.</span>value
    <span class="token punctuation">}</span>
    result<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token function">exec</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token function">execGenerator</span><span class="token punctuation">(</span>getDataByGenerator<span class="token punctuation">)</span>
<span class="token comment">// 3.3 \u5F15\u5165\u7B2C\u4E09\u65B9\u5305\uFF1Aco\uFF08TJ \u5199\u7684\uFF09</span>
<span class="token keyword">const</span> co <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;co&#39;</span><span class="token punctuation">)</span>
<span class="token function">co</span><span class="token punctuation">(</span>getDataByGenerator<span class="token punctuation">)</span>

<span class="token comment">// 4. \u6700\u4F18\u65B9\u5F0F\uFF1Aasync\u3001await</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getDataByAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> res1 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res1:&#39;</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span> <span class="token comment">// 1\u79D2\u540E\u8F93\u51FA res1: 2</span>
  <span class="token keyword">const</span> res2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestData</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res2:&#39;</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span> <span class="token comment">// 2\u79D2\u540E\u8F93\u51FA res2: 4</span>
  <span class="token keyword">const</span> res3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">requestData</span><span class="token punctuation">(</span>res2<span class="token punctuation">)</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;res3:&#39;</span><span class="token punctuation">,</span> res3<span class="token punctuation">)</span> <span class="token comment">// 3\u79D2\u540E\u8F93\u51FA res3: 8</span>
<span class="token punctuation">}</span>

<span class="token function">getDataByAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,34);function _(j,I){const a=u("ExternalLinkIcon");return e(),c("div",null,[k,n("p",null,[i,r,d,n("a",m,[f,t(a)]),y,g,w,n("a",v,[h,t(a)]),x]),b])}const N=o(l,[["render",_],["__file","iterator-generator.html.vue"]]);export{N as default};
